public class Phone implements Comparable {
private String brand;
private String model;
private double cost;
public Phone(String brand, String model, double cost) {
    this.brand = brand;
    this.model = model;
    this.cost = cost;
}

public String getBrand() {
    return brand;
}

public String getModel() {
    return model;
}

public double getCost() {
    return cost;
}

public void setBrand(String brand) {
    this.brand = brand;
}

public void setModel(String model) {
    this.model = model;
}

public void setCost(double cost) {
    this.cost = cost;
}

@Override
public int compareTo(Phone o) {
    if (this.cost > o.cost) {
        return 1;
    } else if (this.cost < o.cost) {
        return -1;
    } else {
        return 0;
    }
}
// Код для создания исходного списка объектов класса Phone

ArrayList phones = new ArrayList<>();
phones.add(new Phone("Apple", "iPhone 12", 800.99));
phones.add(new Phone("Samsung", "Galaxy S21", 899.99));
phones.add(new Phone("OnePlus", "8T", 749.99));
phones.add(new Phone("Google", "Pixel 5", 699.99));
phones.add(new Phone("Xiaomi", "Mi 11", 699.99));

// Код для получения списка моделей конкретного производителя (например, Samsung)

ArrayList samsungModels = phones.stream()
.filter(phone -> phone.getBrand().equals("Samsung"))
.map(Phone::getModel)
.collect(Collectors.toCollection(ArrayList::new));

System.out.println(samsungModels); // [Galaxy S21]

// Код для сортировки списка объектов класса Phone и вывода моделей и стоимости

phones.stream()
.sorted()
.forEach(phone -> System.out.println(phone.getModel() + " - $" + phone.getCost()));
